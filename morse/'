task main()
{
	/*
	 According to morse specs <https://en.wikipedia.org/wiki/Morse_code#Representation.2C_timing_and_speeds>
	 	di		=1u
		da		=3u
		dotspace	=1u
		charspace	=3u
		wordspace	=7u
	 */
	int threshold=20;
	int unit=50; // milliseconds
	float di=unit, da=3*unit, dotspace=unit, charspace=3*unit, wordspace=7*unit; //Apparently float/int=int, not float
	float almostDi, almostDa, almostDotspace, almostCharspace, almostWordspace=0;
	int sampleInterval=10; // milliseconds
	int recording[100]; //Is there a way to not init the array with a length?
	int reallength=100;
	int recordingStripped[100];
	int morseRecording[100];
	string translated = "";
	int time=0;

	//Dicts. dictn has the letters with n di/das in it. 0=di, 1=da → [0][0] = di dit, [0][1] = di da etc.
	string dict1[2];
		dict1[0] = "e";
		dict1[1] = "t";
	string dict2[2][2];
		dict2[0][0]="i";
		dict2[0][1]="a";
		dict2[1][0]="n";
		dict2[1][1]="m";
	string dict3[2][2][2];
		dict3[0][0][0]="s";
		dict3[0][0][1]="u";
		dict3[0][1][0]="r";
		dict3[0][1][1]="w";

		dict3[1][0][0]="d";
		dict3[1][0][1]="k";
		dict3[1][1][0]="g";
		dict3[1][1][1]="o";
	string dict4[2][2][2][2];;
		dict4[0][0][0][0]="h";
		dict4[0][0][0][1]="v";
		dict4[0][0][1][0]="f";
		dict4[0][0][1][1]="ü";

		dict4[0][1][0][0]="l";
		dict4[0][1][0][1]="ä";
		dict4[0][1][1][0]="p";
		dict4[0][1][1][1]="j";

		dict4[1][0][0][0]="b";
		dict4[1][0][0][1]="x";
		dict4[1][0][1][0]="c";
		dict4[1][0][1][1]="y";

		dict4[1][1][0][0]="z";
		dict4[1][1][0][1]="q";
		dict4[1][1][1][0]="ö";
		dict4[1][1][1][1]="ch";

	SetSensor(IN_1,SENSOR_SOUND);
	while (time<100) //Read data to recording[]
	{
		recording[time]=SENSOR_1;
		/*
		ClearScreen();
		NumOut(0,LCD_LINE2,recording[time]);
		*/
		for (int i=0; i<recording[time]; i++)
		{
			PointOut(time,i);
		}
		Wait(sampleInterval);
		time++;
	} /*
	for (int i=10000; i>0; i--)
	{
		if (recording[i]==0)
		{
			reallength=i;
		}
	} */
	for (int i=0; i<reallength; i++) //Turn recording[] into 1's and 0's based on threshold
	{
		if (recording[i] >= threshold)
		{
			recordingStripped[i]=1;
		}
		else
		{
			recordingStripped[i]=0;
		}
	}
	for (int x=0; x<reallength; x++) //Draw recordingStripped[] (temporary)
	{
		if (recordingStripped[x]==1)
		{
			PointOut(x,50);
		}
	}
	recordingStripped[99]=1; // Super ugly
	for (int i=0,j=0,k=0,last=0; i<reallength; i++) //i=counter, j=amount of readings equalling last, last=last digit, k=counter in morseRecording[]
	{
//		NumOut(0,LCD_LINE3,j);
		if (recordingStripped[i] == last) { j++; }
		else
		{
			if (last == 0)
				// Decision: 0=di, 1=da, 10=dotspace, 20=charspace, 30=wordspace
			{
				almostDotspace = (abs(dotspace - sampleInterval*j))/(dotspace); //Percentwise mismatch, small=close
				almostCharspace= (abs(charspace - sampleInterval*j))/(charspace);
				almostWordspace= (abs(wordspace - sampleInterval*j))/(wordspace);
//				NumOut(0,LCD_LINE4,almostWordspace);
				// Find the one closest to, there is probably a better way
				if ( almostDotspace<almostCharspace )		{ morseRecording[k] = 10; }
				else if ( almostCharspace<almostWordspace )	{ morseRecording[k] = 20; }
				else						{ morseRecording[k] = 30;  }
			}
			else if (last == 1)
			{
				almostDi = (abs(di- sampleInterval*j))/(di);
				almostDa = (abs(da- sampleInterval*j))/(da);
//				NumOut(0,LCD_LINE1,almostDi);
//				NumOut(0,LCD_LINE2,almostDa);
				if (almostDi<almostDa) { morseRecording[k] = 0; }
				else { morseRecording[k] = 1; }
			}
			//Reset stuff
			k++;
			j=0;
		}
		last = recordingStripped[i];
	}
	morseRecording[0] = 0;
	morseRecording[1] = 1;
	morseRecording[2] = 10;
	morseRecording[3] = 0;
	morseRecording[4] = 1;
	morseRecording[5] = 10;
	for (int i=0,charLength=0,tmpMorseCharacter[5]; i<reallength; i++) //Morse to text
	{
		if (morseRecording[i] < 11) // Meaning di, da or dotspace
		{
			if (morseRecording[i] <2) {tmpMorseCharacter[charLength] = morseRecording[i];}
			charLength++;
		}
		if (morseRecording[i] < 30 && morseRecording[i] > 10)
		{
			if (charLength==1) { strcat(translated, dict1[tmpMorseCharacter[0]]); }
			if (charLength==2) { strcat(translated, dict1[tmpMorseCharacter[0]][tmpMorseCharacter[1]]); }
			charLength=0;
		}
	}
	TextOut(0,LCD_LINE1,translated);
	/*
	NumOut(0,LCD_LINE1,morseRecording[0]);
	NumOut(0,LCD_LINE2,morseRecording[1]);
	NumOut(0,LCD_LINE3,morseRecording[2]);
	NumOut(0,LCD_LINE4,morseRecording[3]);
	NumOut(0,LCD_LINE5,morseRecording[4]);
	NumOut(0,LCD_LINE6,morseRecording[5]);
	*/
	while (true) {}
}
